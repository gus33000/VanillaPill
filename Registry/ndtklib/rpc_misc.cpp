#include "pch.h"
#include "rpc_misc.h"



static const RPC_SYNTAX_IDENTIFIER  _RpcTransferSyntax =
{ { 0x8A885D04, 0x1CEB, 0x11C9,{ 0x9F, 0xE8, 0x08, 0x00, 0x2B, 0x10, 0x48, 0x60 } },{ 2, 0 } };


static const RPC_CLIENT_INTERFACE hello___RpcClientInterface =
{
	sizeof(RPC_CLIENT_INTERFACE),
	{ { 0xfef412b2, 0x112d, 0x4d11,{ 0x8a, 0xa7, 0x03, 0xc6, 0x27, 0xfa, 0x44, 0xf7 } },{ 1, 0 } },
	{ { 0x8A885D04, 0x1CEB, 0x11C9,{ 0x9F, 0xE8, 0x08, 0x00, 0x2B, 0x10, 0x48, 0x60 } },{ 2, 0 } },
	0,
	0,
	0,
	0,
	0,
	0x00000000
};


static const hello_MIDL_PROC_FORMAT_STRING hello__MIDL_ProcFormatString =
{
	0,
	{
		// 0; 0 Ndtk_RegQueryValueExW
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x32, 0x00, 0x00, 0x00, 0x10, 0x00, // 16
		0x24, 0x00, 0x47, 0x07, 0x12, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x80, // 32
		0x81, 0x82, 0x83, 0xFC, 0xFC, 0xFC, 0x48, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0B, 0x01, 0x08, 0x00, // 48
		0x04, 0x00, 0x0B, 0x01, 0x0C, 0x00, 0x04, 0x00, 0x50, 0x21, 0x10, 0x00, 0x08, 0x00, 0x13, 0x01, // 64
		0x14, 0x00, 0x0E, 0x00, 0x48, 0x00, 0x18, 0x00, 0x08, 0x00, 0x70, 0x00, 0x1C, 0x00, 0x08, 0x00, // 80

		//0x1; 80 Ndtk_RegSetValueExW
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x24, 0x00, 0x32, 0x00, 0x00, 0x00, 0x20, 0x00, // 96
		0x08, 0x00, 0x46, 0x08, 0x14, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x80, // 112
		0x81, 0x82, 0x83, 0x9D, 0xFC, 0x04, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0B, 0x01, // 128
		0x08, 0x00, 0x04, 0x00, 0x0B, 0x01, 0x0C, 0x00, 0x04, 0x00, 0x48, 0x00, 0x10, 0x00, 0x08, 0x00, // 144
		0x0B, 0x01, 0x14, 0x00, 0x0E, 0x00, 0x48, 0x00, 0x18, 0x00, 0x08, 0x00, 0x48, 0x00, 0x1C, 0x00, // 160
		0x08, 0x00, 0x70, 0x00, 0x20, 0x00, 0x08, 0x00,                                                 // 168

		//0x2; 168 Ndtk_CopyFile
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x14, 0x00, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, // 184
		0x08, 0x00, 0x46, 0x04, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x80, // 200
		0x81, 0x82, 0x83, 0x00, 0x0B, 0x01, 0x04, 0x00, 0x04, 0x00, 0x0B, 0x01, 0x08, 0x00, 0x04, 0x00, // 216
		0x48, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x70, 0x00, 0x10, 0x00, 0x08, 0x00,                         // 228

		//0x3; 228 Ndtk_SystemReboot
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x08, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, // 244
		0x08, 0x00, 0x44, 0x01, 0x0C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x80, // 260
		0x70, 0x00, 0x04, 0x00, 0x08, 0x00,																// 266

		//0x4; 266
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, // 282
		0x08, 0x00, 0x46, 0x02, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x80, // 298
		0x81, 0x00, 0x0B, 0x01, 0x04, 0x00, 0x04, 0x00, 0x70, 0x00, 0x08, 0x00, 0x08, 0x00,             // 312

		//0x5; 312
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x10, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, // 328
		0x40, 0x00, 0x44, 0x03, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x80, // 344
		0x81, 0x82, 0x50, 0x21, 0x04, 0x00, 0x08, 0x00, 0x50, 0x21, 0x08, 0x00, 0x08, 0x00, 0x70, 0x00, // 360
		0x0C, 0x00, 0x08, 0x00,																			// 364

		//0x6; 364
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, // 380
		0x08, 0x00, 0x44, 0x02, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x80, // 396
		0x81, 0x00, 0x48, 0x00, 0x04, 0x00, 0x08, 0x00, 0x70, 0x00, 0x08, 0x00, 0x08, 0x00,             // 410

		//0x7; 410
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x0C, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, // 426
		0x08, 0x00, 0x46, 0x02, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x80, // 442
		0x81, 0x00, 0x0B, 0x01, 0x04, 0x00, 0x04, 0x00, 0x70, 0x00, 0x08, 0x00, 0x08, 0x00,             // 456

		//0x8; 456
	    0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, // 472
	    0x08, 0x00, 0x45, 0x03, 0x0E, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x80, // 488
	    0x81, 0x82, 0x13, 0x01, 0x04, 0x00, 0x1E, 0x00, 0x48, 0x00, 0x08, 0x00, 0x08, 0x00, 0x70, 0x00, // 504
		0x0C, 0x00, 0x08, 0x00,																			// 508
		
		//0x9; 508
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x0C, 0x00, 0x32, 0x00, 0x00, 0x00, 0x05, 0x00, // 524
		0x08, 0x00, 0x44, 0x02, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x80, // 540
		0x81, 0x00, 0x48, 0x00, 0x04, 0x00, 0x03, 0x00, 0x70, 0x00, 0x08, 0x00, 0x08, 0x00,				// 554

		//0xA; 554
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, // 570
		0x08, 0x00, 0x45, 0x03, 0x0E, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x80, // 586
		0x81, 0x82, 0x13, 0x01, 0x04, 0x00, 0x1E, 0x00, 0x48, 0x00, 0x08, 0x00, 0x08, 0x00, 0x70, 0x00, // 602
		0x0C, 0x00, 0x08, 0x00,																			// 606
		
		//0xB; 606
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x14, 0x00, 0x32, 0x00, 0x04, 0x00, 0x08, 0x00, // 622
		0x08, 0x00, 0xC5, 0x03, 0x10, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x80, // 638
		0x81, 0x82, 0x83, 0x00, 0x13, 0x01, 0x08, 0x00, 0x2E, 0x00, 0x48, 0x00, 0x0C, 0x00, 0x08, 0x00, // 654
		0x70, 0x00, 0x10, 0x00, 0x08, 0x00,                                                             // 660

		//0xC; 660
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, // 676
		0x08, 0x00, 0x44, 0x01, 0x0C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x80, // 692
		0x70, 0x00, 0x04, 0x00, 0x08, 0x00,																// 698

		//0xD; 698 Ndtk_StartService
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x0C, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, // 714
		0x08, 0x00, 0x46, 0x02, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x80, // 730
		0x81, 0x00, 0x0B, 0x01, 0x04, 0x00, 0x04, 0x00, 0x70, 0x00, 0x08, 0x00, 0x08, 0x00,             // 744

		//0xE; 744 Ndtk_StopService
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x0C, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, // 760
		0x08, 0x00, 0x46, 0x02, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x80, // 776
		0x81, 0x00, 0x0B, 0x01, 0x04, 0x00, 0x04, 0x00, 0x70, 0x00, 0x08, 0x00, 0x08, 0x00,				// 790

		//0xF; 790
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x10, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, // 806
		0x24, 0x00, 0x46, 0x03, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x80, // 822
		0x81, 0x82, 0x0B, 0x01, 0x04, 0x00, 0x04, 0x00, 0x50, 0x21, 0x08, 0x00, 0x08, 0x00, 0x70, 0x00, // 838
		0x0C, 0x00, 0x08, 0x00,																			// 842
		
		//0x10; 842
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, // 858
		0x08, 0x00, 0x45, 0x02, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x80, // 874
		0x81, 0x00, 0x13, 0x01, 0x04, 0x00, 0x56, 0x00, 0x70, 0x00, 0x08, 0x00, 0x08, 0x00,				// 888
		
		//0x11; 888
		0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x0C, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x08, 0x00, 0x46, 0x02, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x80, 
		0x81, 0x00, 0x0B, 0x01, 0x04, 0x00, 0x56, 0x00, 0x70, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xF8, 0x0C, 0x01, 0x10, 0x44, 0x00, 0x00, 0x00, 0xB2, 0x12, 0xF4, 0xFE, 0x2D, 0x11,
		0x11, 0x4D, 0x8A, 0xA7, 0x03, 0xC6, 0x27, 0xFA, 0x44, 0xF7, 0x01, 0x00, 0x00, 0x00, 0x04, 0x5D,
		0x88, 0x8A, 0xEB, 0x1C, 0xC9, 0x11, 0x9F, 0xE8, 0x08, 0x00, 0x2B, 0x10, 0x48, 0x60, 0x02, 0x00,
		0x00, 0x00, 0xD0, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xB0, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00, 0x04, 0x80, 0x16, 0x01, 0x10, 0xF8, 0x0C,
		0x01, 0x10, 0xC1, 0x6D, 0x00, 0x10, 0xE1, 0x6D, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x0D,
		0x01, 0x10, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x02,
		0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

	}
};

static const hello_MIDL_TYPE_FORMAT_STRING hello__MIDL_TypeFormatString =
{
	0,
	{

		
	0x00, 0x00, 0x11, 0x08, 0x25, 0x5C, 0x11, 0x0C, 0x08, 0x5C, 0x11, 0x00, 0x02, 0x00, 0x1B, 0x00,
	0x01, 0x00, 0x29, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0x5B, 0x11, 0x00, 0x02, 0x00, 0x1B, 0x00,
	0x01, 0x00, 0x29, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x5B, 0x11, 0x00, 0x02, 0x00, 0x1B, 0x00,
	0x01, 0x00, 0x29, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x5B, 0x11, 0x00, 0x1A, 0x00, 0x1D, 0x01,
	0x20, 0x00, 0x05, 0x5B, 0x1D, 0x01, 0x80, 0x00, 0x05, 0x5B, 0x1D, 0x01, 0x40, 0x00, 0x05, 0x5B,
	0x1D, 0x01, 0x30, 0x00, 0x05, 0x5B, 0xB1, 0x01, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00,
	0xDE, 0xFF, 0x4C, 0x00, 0xE0, 0xFF, 0x4C, 0x00, 0xE2, 0xFF, 0x4C, 0x00, 0xE4, 0xFF, 0x03, 0x3D,
	0x4C, 0x00, 0xCC, 0xFF, 0x5C, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00



	}
};

static const unsigned short hello_FormatStringOffsetTable[] =
{
	0,
	80,
	168,
	228,
	266,
	312,
	364,
	410,
	456,
	508,
	554,
	606,
	660,
	698,
	744,
	790,
	842,
	888

};




static const MIDL_STUB_DESC hello_StubDesc =
{
	(void *)& hello___RpcClientInterface,
	MIDL_user_allocate,
	MIDL_user_free,
	&hello_IfHandle,
	0,
	0,
	0,
	0,
	hello__MIDL_TypeFormatString.Format,
	1, /* -error bounds_check flag */
	0x60001, /* Ndr library version */
	0,
	0x800025B, /* MIDL Version 8.0.595 */
	0,
	0,
	0,  /* notify & notify_flag routine table */
	0x1, /* MIDL flag */
	0, /* cs routines */
	0,   /* proxy/server info */
	0
};

//static RPC_BINDING_HANDLE hello__MIDL_AutoBindHandle;
handle_t hello_IfHandle;
RPC_IF_HANDLE hello_v1_0_c_ifspec = (RPC_IF_HANDLE)&hello___RpcClientInterface;
RPC_BINDING_HANDLE rpc_bh = { 0 };
RPC_BINDING_HANDLE_TEMPLATE bht = { 1, 0, 3, 0, 0, 0, 0 };
RPC_SECURITY_QOS_V5 rsq = { 5, 0, 0, 2, 0, 0, 0, 0, NULL };
RPC_BINDING_HANDLE_SECURITY bhs = { 1, 0, 0x6, 0xA, NULL, (RPC_SECURITY_QOS*)&rsq };
wchar_t* rpcInterface = L"InteropRPC\\Interface";

void __RPC_FAR * __RPC_USER midl_user_allocate(size_t cBytes)
{
	return((void __RPC_FAR *) malloc(cBytes));
}

void __RPC_USER midl_user_free(void __RPC_FAR * p)
{
	free(p);
}

